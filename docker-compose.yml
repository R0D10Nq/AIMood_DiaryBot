version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mood_diary_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mood_diary}
      - POSTGRES_USER=${POSTGRES_USER:-mood_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mood_password}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - mood_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mood_user} -d ${POSTGRES_DB:-mood_diary}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache (for caching and session storage)
  redis:
    image: redis:7-alpine
    container_name: mood_diary_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mood_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mood_diary_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mood_user}:${POSTGRES_PASSWORD:-mood_password}@postgres:5432/${POSTGRES_DB:-mood_diary}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
    ports:
      - "8000:8000"
    networks:
      - mood_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Vue.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mood_diary_frontend
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api}
      - VITE_APP_NAME=${VITE_APP_NAME:-AI Mood Diary}
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mood_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Telegram Bot (separate service for better scalability)
  telegram_bot:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mood_diary_bot
    restart: unless-stopped
    command: ["python", "-m", "app.bot.main"]
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mood_user}:${POSTGRES_PASSWORD:-mood_password}@postgres:5432/${POSTGRES_DB:-mood_diary}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-this}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/data:/app/data
    networks:
      - mood_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe')"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Nginx Load Balancer (optional - for production scaling)
  nginx:
    image: nginx:alpine
    container_name: mood_diary_nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "8080:80"
      - "8443:443"
    networks:
      - mood_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  mood_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
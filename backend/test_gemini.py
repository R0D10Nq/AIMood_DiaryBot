"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Gemini AI
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.gemini_service import gemini_service


async def test_gemini_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Gemini AI"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini AI —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not gemini_service.is_available():
        print("‚ö†Ô∏è Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞), —Ç–µ—Å—Ç–∏—Ä—É–µ–º mock —Ä–µ–∂–∏–º")
    else:
        print("‚úÖ Gemini AI –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            "text": "–°–µ–≥–æ–¥–Ω—è –±—ã–ª –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –í—Å—Ç—Ä–µ—Ç–∏–ª—Å—è —Å –¥—Ä—É–∑—å—è–º–∏, –ø–æ–≥—É–ª—è–ª–∏ –≤ –ø–∞—Ä–∫–µ, –ø–æ–µ–ª–∏ –º–æ—Ä–æ–∂–µ–Ω–æ–µ. –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ!",
            "mood_score": 8.5
        },
        {
            "text": "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —É—Å—Ç–∞–≤—à–∏–º –∏ –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º. –†–∞–±–æ—Ç–∞ –Ω–µ –∏–¥–µ—Ç, –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–º–∞. –•–æ—á–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ —Å–ø–∞—Ç—å.",
            "mood_score": 3.0
        },
        {
            "text": "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ. –†–∞–±–æ—Ç–∞–ª, —É–∂–∏–Ω–∞–ª, —Å–º–æ—Ç—Ä–µ–ª —Ç–µ–ª–µ–≤–∏–∑–æ—Ä.",
            "mood_score": 5.5
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π
    for i, case in enumerate(test_cases, 1):
        print(f"\n--- –¢–µ—Å—Ç {i} ---")
        print(f"–¢–µ–∫—Å—Ç: {case['text'][:50]}...")
        print(f"–û—Ü–µ–Ω–∫–∞: {case['mood_score']}")
        
        try:
            result = await gemini_service.analyze_mood_text(
                case['text'], 
                case['mood_score']
            )
            
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {result.get('processing_time', 0):.2f}—Å")
            print(f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {result.get('sentiment_label')} ({result.get('sentiment_score'):.2f})")
            print(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {result.get('dominant_emotion')}")
            print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(result.get('keywords', []))}")
            print(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {result.get('recommendations', '')[:100]}...")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence_score', 0):.2f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(test_gemini_service())
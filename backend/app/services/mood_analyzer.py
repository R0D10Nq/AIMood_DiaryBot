"""
–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ AI –∞–Ω–∞–ª–∏–∑–æ–º
"""

import logging
from typing import Dict, Any, Optional
from sqlalchemy.orm import Session
from datetime import datetime

from .gemini_service import gemini_service
from ..models.ai_analysis import AIAnalysis
from ..models.mood_entry import MoodEntry
from ..schemas import AIAnalysisCreate

logger = logging.getLogger(__name__)


class MoodAnalyzer:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î"""
    
    def __init__(self):
        self.ai_service = gemini_service
    
    async def analyze_and_save(
        self, 
        db: Session, 
        mood_entry: MoodEntry
    ) -> Optional[AIAnalysis]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            mood_entry: –ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç AIAnalysis –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            logger.info(f"üß† –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ID: {mood_entry.id}")
            
            # –ü—Ä–æ–≤–æ–¥–∏–º AI –∞–Ω–∞–ª–∏–∑
            analysis_result = await self.ai_service.analyze_mood_text(
                text=mood_entry.mood_text,
                mood_score=mood_entry.mood_score
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            analysis_data = AIAnalysisCreate(
                mood_entry_id=mood_entry.id,
                sentiment_score=analysis_result.get("sentiment_score"),
                sentiment_label=analysis_result.get("sentiment_label"),
                emotions=analysis_result.get("emotions"),
                dominant_emotion=analysis_result.get("dominant_emotion"),
                keywords=analysis_result.get("keywords"),
                themes=analysis_result.get("themes"),
                recommendations=analysis_result.get("recommendations"),
                insights=analysis_result.get("insights"),
                ai_model=analysis_result.get("ai_model", "gemini-1.5-flash"),
                processing_time=analysis_result.get("processing_time"),
                confidence_score=analysis_result.get("confidence_score")
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_analysis = AIAnalysis(
                user_id=mood_entry.user_id,
                **analysis_data.model_dump()
            )
            
            db.add(db_analysis)
            db.commit()
            db.refresh(db_analysis)
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {db_analysis.id}")
            return db_analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
            db.rollback()
            return None
    
    def get_mood_summary(self, db: Session, user_id: int, days: int = 7) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å–≤–æ–¥–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
            from ..crud.mood_entry import mood_entry_crud
            entries = mood_entry_crud.get_recent_entries(db, user_id, days)
            
            if not entries:
                return {
                    "period_days": days,
                    "total_entries": 0,
                    "message": "–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
                }
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_entries = len(entries)
            average_mood = sum(entry.mood_score for entry in entries) / total_entries
            
            # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π (–∏–∑ AI –∞–Ω–∞–ª–∏–∑–æ–≤)
            emotion_stats = {}
            sentiment_stats = {"positive": 0, "negative": 0, "neutral": 0}
            
            for entry in entries:
                if entry.ai_analysis:
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π
                    if entry.ai_analysis.emotions:
                        for emotion, value in entry.ai_analysis.emotions.items():
                            if emotion not in emotion_stats:
                                emotion_stats[emotion] = []
                            emotion_stats[emotion].append(value)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                    sentiment = entry.ai_analysis.sentiment_label
                    if sentiment in sentiment_stats:
                        sentiment_stats[sentiment] += 1
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
            avg_emotions = {}
            for emotion, values in emotion_stats.items():
                avg_emotions[emotion] = round(sum(values) / len(values), 2) if values else 0
            
            # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
            dominant_emotion = max(avg_emotions.items(), key=lambda x: x[1])[0] if avg_emotions else "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            
            # –¢—Ä–µ–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            if len(entries) >= 3:
                recent_avg = sum(entry.mood_score for entry in entries[:3]) / 3
                older_avg = sum(entry.mood_score for entry in entries[-3:]) / 3
                
                if recent_avg > older_avg + 0.5:
                    trend = "—É–ª—É—á—à–∞–µ—Ç—Å—è üìà"
                elif recent_avg < older_avg - 0.5:
                    trend = "—É—Ö—É–¥—à–∞–µ—Ç—Å—è üìâ"
                else:
                    trend = "—Å—Ç–∞–±–∏–ª—å–Ω–æ ‚û°Ô∏è"
            else:
                trend = "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            
            return {
                "period_days": days,
                "total_entries": total_entries,
                "average_mood": round(average_mood, 1),
                "mood_trend": trend,
                "dominant_emotion": dominant_emotion,
                "emotion_averages": avg_emotions,
                "sentiment_distribution": sentiment_stats,
                "latest_entry_date": entries[0].entry_date.strftime("%d.%m.%Y") if entries else None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
            return {
                "period_days": days,
                "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
            }
    
    def get_recommendations_for_user(self, db: Session, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            from ..crud.mood_entry import mood_entry_crud
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º
            recent_entries = mood_entry_crud.get_recent_entries(db, user_id, 5)
            
            if not recent_entries:
                return {
                    "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                    "recommendations": [
                        "–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ",
                        "–ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫—É, –Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–Ω—è"
                    ]
                }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ AI –∞–Ω–∞–ª–∏–∑–æ–≤
            all_recommendations = []
            mood_scores = []
            
            for entry in recent_entries:
                mood_scores.append(entry.mood_score)
                if entry.ai_analysis and entry.ai_analysis.recommendations:
                    all_recommendations.append(entry.ai_analysis.recommendations)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            avg_mood = sum(mood_scores) / len(mood_scores)
            
            # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            base_recommendations = []
            
            if avg_mood < 4:
                base_recommendations = [
                    "üå± –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É",
                    "üö∂‚Äç‚ôÄÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ",
                    "üßò‚Äç‚ôÄÔ∏è –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏–ª–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—é"
                ]
            elif avg_mood < 6:
                base_recommendations = [
                    "üí™ –î–æ–±–∞–≤—å—Ç–µ —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–π –¥–µ–Ω—å",
                    "üë• –ü—Ä–æ–≤–æ–¥–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏",
                    "üéØ –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±–µ –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ü–µ–ª–∏"
                ]
            else:
                base_recommendations = [
                    "‚ú® –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                    "üìö –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑—É—á–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ",
                    "ü§ù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –ø–æ–∑–∏—Ç–∏–≤–æ–º —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏"
                ]
            
            return {
                "average_mood": round(avg_mood, 1),
                "period": "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π",
                "ai_recommendations": all_recommendations[-3:] if all_recommendations else [],
                "general_recommendations": base_recommendations,
                "total_entries_analyzed": len(recent_entries)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return {
                "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
                "general_recommendations": [
                    "–í–µ–¥–∏—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
                    "–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é",
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"
                ]
            }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
mood_analyzer = MoodAnalyzer()
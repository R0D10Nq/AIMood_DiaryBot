"""
Telegram Bot –¥–ª—è AI Mood Diary Bot
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import logging
import asyncio
from typing import Dict, Any
from datetime import datetime, date

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

from ..core.config import settings
from ..core.database import SessionLocal
from ..crud.user import user_crud
from ..crud.mood_entry import mood_entry_crud
from ..services.mood_analyzer import mood_analyzer
from ..schemas import UserCreate, MoodEntryCreate

logger = logging.getLogger(__name__)


class MoodDiaryBot:
    """Telegram Bot –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    
    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.application = None
        self._user_states: Dict[int, Dict[str, Any]] = {}  # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
        if not self.token:
            logger.error("‚ùå Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("mood", self.mood_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("recommendations", self.recommendations_command))
        self.application.add_handler(CommandHandler("analytics", self.analytics_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("‚úÖ Telegram Bot –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return self.application
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat_id = update.effective_chat.id
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        with SessionLocal() as db:
            user_data = {
                "username": user.username,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "language_code": user.language_code or "ru"
            }
            
            db_user, created = user_crud.get_or_create(db, user.id, user_data)
            
            if created:
                welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Mood Diary Bot, {user.first_name or '–¥—Ä—É–≥'}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

üî• –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ üìù –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ üß† –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é AI
‚Ä¢ üìä –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç—Ä–µ–Ω–¥—ã
‚Ä¢ üí° –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
‚Ä¢ üéØ –ü–æ–º–æ—á—å –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å —Å–µ–±—è

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /mood —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–Ω—è!
"""
            else:
                welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name or '–¥—Ä—É–≥'}!

–£ –≤–∞—Å —É–∂–µ {db_user.mood_entries_count} –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mood –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ /stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"), KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"), KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ *AI Mood Diary Bot - –°–ø—Ä–∞–≤–∫–∞*

üìù *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/mood - –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–Ω—è
/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/recommendations - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
/analytics - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*

1Ô∏è‚É£ *–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mood –∏–ª–∏ –∫–Ω–æ–ø–∫—É "üìù –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
2Ô∏è‚É£ *–û—Ü–µ–Ω–∫–∞:* –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10
3Ô∏è‚É£ *–û–ø–∏—Å–∞–Ω–∏–µ:* –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–µ–Ω—å
4Ô∏è‚É£ *AI –∞–Ω–∞–ª–∏–∑:* –ü–æ–ª—É—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π

üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:*
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
‚Ä¢ –¢—Ä–µ–Ω–¥—ã –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —ç–º–æ—Ü–∏–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
‚Ä¢ –ë—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

‚ùì *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /help
"""
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mood - –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        with SessionLocal() as db:
            today_entry = mood_entry_crud.get_by_user_and_date(db, user_id, date.today())
            
            if today_entry:
                await update.message.reply_text(
                    f"üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å —Å –æ—Ü–µ–Ω–∫–æ–π {today_entry.mood_score}/10.\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (/stats) –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._user_states[user_id] = {
            "action": "waiting_mood_score",
            "step": 1
        }
        
        # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        keyboard = []
        for row in range(2):
            keyboard_row = []
            for col in range(5):
                score = row * 5 + col + 1
                keyboard_row.append(InlineKeyboardButton(f"{score}", callback_data=f"mood_score_{score}"))
            keyboard.append(keyboard_row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìä *–û—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –æ—Ç 1 –¥–æ 10:*\n\n"
            "1-2: –û—á–µ–Ω—å –ø–ª–æ—Ö–æ üòû\n"
            "3-4: –ü–ª–æ—Ö–æ üòî\n"
            "5-6: –ù–æ—Ä–º–∞–ª—å–Ω–æ üòê\n"
            "7-8: –•–æ—Ä–æ—à–æ üòä\n"
            "9-10: –û—Ç–ª–∏—á–Ω–æ! üòÑ",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        
        with SessionLocal() as db:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            summary = mood_analyzer.get_mood_summary(db, user_id, 7)
            
            if summary.get("total_entries", 0) == 0:
                await update.message.reply_text(
                    "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.\n\n"
                    "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /mood –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–Ω—è!"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"""
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {summary['period_days']} –¥–Ω–µ–π:*

üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {summary['total_entries']}
‚≠ê –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {summary['average_mood']}/10
üìâ –¢—Ä–µ–Ω–¥: {summary['mood_trend']}
üé≠ –û—Å–Ω–æ–≤–Ω–∞—è —ç–º–æ—Ü–∏—è: {summary.get('dominant_emotion', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}

üíæ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {summary.get('latest_entry_date', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if summary.get('sentiment_distribution'):
                sentiment = summary['sentiment_distribution']
                stats_text += f"\nüéØ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*\n"
                stats_text += f"‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ: {sentiment.get('positive', 0)} –¥–Ω–µ–π\n"
                stats_text += f"‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ: {sentiment.get('neutral', 0)} –¥–Ω–µ–π\n"
                stats_text += f"‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ: {sentiment.get('negative', 0)} –¥–Ω–µ–π\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [InlineKeyboardButton("üìà –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
                [InlineKeyboardButton("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    
    async def recommendations_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommendations - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        with SessionLocal() as db:
            recommendations = mood_analyzer.get_recommendations_for_user(db, user_id)
            
            if recommendations.get("error"):
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            rec_text = f"üí° *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏*\n\n"
            
            if recommendations.get("average_mood"):
                rec_text += f"üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {recommendations['average_mood']}/10\n"
                rec_text += f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {recommendations.get('period', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏')}\n\n"
            
            # AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            ai_recs = recommendations.get("ai_recommendations", [])
            if ai_recs:
                rec_text += "üß† *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ò–ò:*\n"
                for i, rec in enumerate(ai_recs, 1):
                    rec_text += f"{i}. {rec}\n"
                rec_text += "\n"
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            general_recs = recommendations.get("general_recommendations", [])
            if general_recs:
                rec_text += "üéØ *–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
                for rec in general_recs:
                    rec_text += f"‚Ä¢ {rec}\n"
            
            await update.message.reply_text(rec_text, parse_mode=ParseMode.MARKDOWN)
    
    async def analytics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analytics - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        user_id = update.effective_user.id
        
        with SessionLocal() as db:
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
            analytics = mood_entry_crud.get_mood_analytics(db, user_id, "month")
            
            if analytics.get("total_entries", 0) == 0:
                await update.message.reply_text(
                    "üìà –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.\n\n"
                    "–í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            analytics_text = f"""
üìà *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:*

üìä *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {analytics['total_entries']}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analytics['average_mood']}/10

üé≠ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:*
‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ (7-10): {analytics['mood_distribution']['positive']} –¥–Ω–µ–π
‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ (4-6): {analytics['mood_distribution']['neutral']} –¥–Ω–µ–π  
‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ (1-3): {analytics['mood_distribution']['negative']} –¥–Ω–µ–π

üìÖ *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:*
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω—è—Ö
            daily_data = analytics.get('daily_averages', [])
            if daily_data:
                for day in daily_data[-7:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                    analytics_text += f"‚Ä¢ {day['date']}: {day['average_mood']}/10\n"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            keyboard = [
                [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–¥–∞—à–±–æ—Ä–¥", url="http://localhost:3000")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                analytics_text, 
                reply_markup=reply_markup, 
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data.startswith("mood_score_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            score = float(data.split("_")[-1])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in self._user_states:
                self._user_states[user_id] = {}
            
            self._user_states[user_id].update({
                "action": "waiting_mood_text",
                "mood_score": score
            })
            
            await query.edit_message_text(
                f"‚úÖ –û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {score}/10\n\n"
                f"üìù –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –¥–µ–Ω—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:\n"
                f"–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ? –ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ? –ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
            )
        
        elif data == "analytics":
            await self.analytics_command(update, context)
        
        elif data == "recommendations":
            await self.recommendations_command(update, context)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if message_text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            await self.mood_command(update, context)
            return
        elif message_text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.stats_command(update, context)
            return
        elif message_text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
            await self.recommendations_command(update, context)
            return
        elif message_text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
            await self.analytics_command(update, context)
            return
        elif message_text == "‚ùì –ü–æ–º–æ—â—å":
            await self.help_command(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = self._user_states.get(user_id, {})
        
        if user_state.get("action") == "waiting_mood_text":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            mood_score = user_state.get("mood_score")
            mood_text = message_text
            
            if len(mood_text) < 10:
                await update.message.reply_text(
                    "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è, —á—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            await self._save_mood_entry(update, user_id, mood_score, mood_text)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in self._user_states:
                del self._user_states[user_id]
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
            )
    
    async def _save_mood_entry(self, update: Update, user_id: int, mood_score: float, mood_text: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        try:
            with SessionLocal() as db:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
                entry_data = MoodEntryCreate(
                    mood_score=mood_score,
                    mood_text=mood_text,
                    entry_date=datetime.now()
                )
                
                mood_entry = mood_entry_crud.create(db, entry_data, user_id)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_crud.increment_mood_entries(db, user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await update.message.reply_text(
                    f"‚úÖ *–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!*\n\n"
                    f"üìä –û—Ü–µ–Ω–∫–∞: {mood_score}/10\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {mood_text[:100]}{'...' if len(mood_text) > 100 else ''}\n\n"
                    f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò...",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                analysis = await mood_analyzer.analyze_and_save(db, mood_entry)
                
                if analysis:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
                    analysis_text = f"""
üß† *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!*

üé≠ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {analysis.dominant_emotion or '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}
üìà –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {self._get_sentiment_emoji(analysis.sentiment_label)} {analysis.sentiment_label or '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'}

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:*
{analysis.recommendations or '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'}

üîç *–ò–Ω—Å–∞–π—Ç:*
{analysis.insights or '–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–º–æ–≥–∞—é—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'}
"""
                    await update.message.reply_text(analysis_text, parse_mode=ParseMode.MARKDOWN)
                else:
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
                    )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def _get_sentiment_emoji(self, sentiment: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        emoji_map = {
            "positive": "üòä",
            "neutral": "üòê", 
            "negative": "üòî"
        }
        return emoji_map.get(sentiment, "ü§î")
    
    async def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        if not self.application:
            logger.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return
        
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞—é Telegram Bot –≤ —Ä–µ–∂–∏–º–µ polling...")
        
        try:
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES
            )
            
            logger.info("‚úÖ Telegram Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–º
            import signal
            stop_event = asyncio.Event()
            
            def signal_handler():
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                stop_event.set()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
            for sig in [signal.SIGINT, signal.SIGTERM]:
                signal.signal(sig, lambda s, f: signal_handler())
            
            await stop_event.wait()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            import traceback
            logger.error(f"–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            raise
        finally:
            logger.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
            try:
                await self.application.stop()
                await self.application.shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
mood_bot = MoodDiaryBot()